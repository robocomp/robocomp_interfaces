import "/robocomp/interfaces/IDSLs/DifferentialRobot.idsl";

module RoboCompRobotTrajectory
{
  struct State
  {
      string message;
  };
  // Represents pure displacements or pure rotations. The boolean switch pureRotation is used to select between them.
  struct Stage
  {
      int x;
      int z;
      float alpha;
      bool pureRotation;
  };
  sequence<Stage> Trajectory;

  interface RobotTrajectory
  {
    //Rotate in local reference system (rad)
    void rotate (float alpha);
    void rotateVel (float alpha,float vel);
    //Rotate in global reference system (rad)
    void rotateWorld (float alpha);
    void rotateWorldVel (float alpha,float vel);
    //Advance in local reference system (mm)
    void advance(float adv);
    void advanceVel(float adv, float vel);
    
    //void back(float adv);
    //void backVel(float adv, float vel);


    //bezier
    void gotoPointBezier (float x,float z,float alpha);
    void gotoPointBezierVel (float x,float z,float alpha,float advVel,float rotVel);
    void appendPointBezier (float x,float z,float alpha);
    void appendPointBezierVel (float x,float z,float alpha,float advVel,float rotVel);  
    //line
    void gotoPoint (float x,float y);
    void gotoPointVel (float x,float z,float advVel,float rotVel);  
    void gotoPointLine (float x,float z, float alpha);
    void gotoPointLineVel (float x,float z, float alpha,float advVel,float rotVel);  
    void appendPointLine (float x,float z, float alpha);
    void appendPointLineVel (float x,float z, float alpha,float advVel,float rotVel);

    //straightBezier
    void gotoPointStraightBezier (float x,float z,float alpha);
    void gotoPointStraightBezierVel (float x,float z,float alpha,float advVel,float rotVel);
    void appendPointStraightBezier (float x,float z,float alpha);
    void appendPointStraightBezierVel (float x,float z,float alpha,float advVel,float rotVel);  

    //trajectory
    void setPathVel(Trajectory path,float advVel,float rotVel);
    void setPath(Trajectory path);

    void stopTrajectory();
    void getTrajectory(out Trajectory path);

    bool isStopped();

    ///Reset Odometer
    void resetOdometer();         
    ///Set Odometer
    void setOdometer(RoboCompDifferentialRobot::TBaseState state); 

  };
  interface RobotTrajectoryStorm
  {
    void getState(State message);
  };
};

