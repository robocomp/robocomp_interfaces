
module RoboCompRCMaster
{
    /** \interface RCMaster
    *@brief interface RCMaster
    */


    //information about the host
    struct hostInfo {
        string publicIP;
        string privateIP;
        string hostName;
    };

    //stores interface info
    struct interfaceData{
        string name;
        int port;
        string protocol;
    };
    sequence <interfaceData> interfaceList;
    enum CompStatus { Active, Stopped };

    //stores info about an component
    struct compData {
        string uid;
        string name;
        CompStatus status;
        hostInfo host;
        interfaceList interfaces;
    };

    //database of all registred components
    dictionary <string, compData> compDB;

    //cache db
    dictionary <string, int> cacheDb;

    //Exceptions
    exception InvalidComponent{
        compData component;
        string message;
    };

    exception DuplicateComponent{ compData component; };

    exception ComponentNotFound { compData component; };

    exception PortAssignError {
        int port;
        string errorMessage;
    };

    interface rcmaster
    {

        // register a component (and assaign ports) , and monitor (restart if fail?)
        void registerComp(compData compInfo, bool monitor, bool assignPort, out interfaceList idata)
            throws InvalidComponent, DuplicateComponent, PortAssignError;

        //just update the database, dont assign ports
        void updateDb(compDB components)
            throws InvalidComponent, DuplicateComponent;

        //get all comps which pass the filter
        idempotent void getComps(compData filter, out compDB comps)
            throws ComponentNotFound;

        //an simple funcion to find port of a component with single interface
        idempotent int getComPort(string compName, string privateIP)
            throws ComponentNotFound;

        //an simple funcion to find ports of a component with multiple interface
        idempotent interfaceList getComp(string compName, string privateIP)
            throws ComponentNotFound;

        //flush the current cache or/and db
        idempotent void flush(bool maindb);

        //get current status of database
        idempotent string getStat(bool showNames);

    };
};
