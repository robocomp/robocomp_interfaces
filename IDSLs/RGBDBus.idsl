/** \mainpage RoboComp Interfaces: CameraBus.ice
 *
 * \section intro_sec Introduction
* Interface for rgbdCaptureComp.
*
* Basic interface for accessing a set of cameras RGBD cameras.
*/

module RoboCompRGBDBus
{
	/// @brief Hardware exception
	exception HardwareFailedException{
		string what;
	};

	/// @brief
	struct CameraParams {
		string name;
		int colorWidth;
		int colorHeight;
		int colorFPS;
		float colorFocal;
		int depthWidth;
		int depthHeight;
		int depthFPS;
		float depthFocal;
	};

	/// @brief
	dictionary<string,CameraParams> CameraParamsMap;

	/// @brief
	sequence<string> CameraList;

	/// @brief Packed RGB image
	sequence<byte> ColorBuffer;

	/// @brief Depth image in millimeters
	sequence<float> DepthBuffer;

	/// @brief
  struct Image {
		CameraParams camera;
		long colorTimestamp;
		long depthTimestamp;
		ColorBuffer colorImage;
		DepthBuffer depthImage;
		int width;
		int height;
	};

  struct ColorImage {
		CameraParams camera;
		long colorTimestamp;
		ColorBuffer colorImage;
		int width;
		int height;
	};

	/// @brief
	dictionary<string, Image> ImageMap;

	/// @brief
	struct Point3D
	{
		float x;
		float y;
		float z;
		byte r;
		byte g;
		byte b;
	};

	sequence<Point3D> PointCloud;

	dictionary<string, PointCloud> PointCloudMap;

	interface RGBDBus
	{
		/// @brief Returns a sequence of CameraParams containing one entry for each camera in the bus
		idempotent CameraParamsMap getAllCameraParams() throws HardwareFailedException;

		/// @brief Returns a sequence of Images in the out parameter "imageList", from cameras in "cameraList"
		idempotent void getImages( CameraList cameras, out ImageMap images ) throws HardwareFailedException;

		/// @brief Returns a sequence of PointClouds in the out parameter "clouds", from cameras in "cameraList"
		idempotent void getPointClouds( CameraList cameras, out PointCloudMap clouds ) throws HardwareFailedException;

		/// @brief Returns a sequence of projection matrices, from cameras in "cameraList"
    idempotent void getProtoClouds(CameraList cameras, out PointCloudMap protoClouds) throws HardwareFailedException;

		/// @brief Returns a sequence of decimated Images in the out parameter "imageList", from cameras in "cameraList", keeping only 1/2^(decimation-1) pixels
		idempotent void getDecimatedImages( CameraList cameras, int decimation, out ImageMap images ) throws HardwareFailedException;
	};
};
