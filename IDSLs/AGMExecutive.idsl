import "AGMWorldModel.idsl";
import "Planning.idsl";

module RoboCompAGMExecutive
{
	exception Locked { };
	exception OldModel { };
	exception InvalidChange { };

	interface AGMExecutive
	{
		// Activation and deactivation
		void activate();
		void deactivate();

		// For agents
		void structuralChangeProposal(RoboCompAGMWorldModel::World w, string sender, string log) throws Locked, OldModel, InvalidChange;
		void symbolUpdate(RoboCompAGMWorldModel::Node n);
		void symbolsUpdate(RoboCompAGMWorldModel::NodeSequence ns);
		void edgeUpdate(RoboCompAGMWorldModel::Edge e);
		void edgesUpdate(RoboCompAGMWorldModel::EdgeSequence es);
		void addSelfEdge(int nodeid, string edgeType, RoboCompPlanning::StringDictionary attributes);
		void delSelfEdge(int nodeid, string edgeType);

		// For setting the mission
		void setMission(string path);

		// Access to the graph structure
		RoboCompAGMWorldModel::World getModel();
		RoboCompAGMWorldModel::Node getNode(int identifier);
		RoboCompAGMWorldModel::Edge getEdge(int srcIdentifier, int dstIdentifier, string label);

		// For visualization purposes
		void getData(out RoboCompAGMWorldModel::World world, out string target, out RoboCompPlanning::Plan plan);
		void broadcastModel();
		void broadcastPlan();
	};

};

